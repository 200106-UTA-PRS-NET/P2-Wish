
# ASP.NET Core
# Build and test ASP.NET Core projects targeting .NET Core.
# Add steps that run tests, create a NuGet package, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core



trigger:
- master
#pr: none

pool:
  vmImage: 'windows-latest'

variables:
  buildConfiguration: 'Release'
  pathtosolution: 'MediaWish/'

steps:

# ASP.NET Core


- task: SonarCloudPrepare@1
  inputs:
    SonarCloud: 'wishp2'
    organization: 'mediawishp2'
    scannerMode: 'MSBuild'
    projectKey: 'wish'
    extraProperties: |
        sonar.cs.opencover.reportsPaths="$(Build.ArtifactStagingDirectory)/coverage/*"
        sonar.cs.vstest.reportsPaths="$(Build.ArtifactStagingDirectory)/MediaWish.Test/*.trx"


- script: 
    dotnet build --configuration $(buildConfiguration)
  workingDirectory: $(pathtosolution)
  displayName: 'dotnet build $(buildConfiguration)'


- script: dotnet test
    --configuration $(buildConfiguration)
    --no-build
    --results-directory $(Build.ArtifactStagingDirectory)/MediaWish.Test/
    /p:CollectCoverage=true
    /p:CoverletOutputFormat=opencover
    /p:CoverletOutput="$(Build.ArtifactStagingDirectory)/coverage/"
  workingDirectory: $(pathtosolution)
  displayName: 'dotnet test'


- task: SonarCloudAnalyze@1

- task: SonarCloudPublish@1
  inputs:
    pollingTimeoutSec: '300'

- task: DotNetCoreCLI@2
  inputs:
    command: 'publish'
    publishWebProjects: true
    arguments: '--configuration $(buildConfiguration)'

- task: AzureWebApp@1
  inputs:
    azureSubscription: 'Azure subscription 1(9375756f-0e0f-4b34-aa53-18216b72c750)'
    appType: 'webAppLinux'
    appName: 'MediaWish'
    package: '$(System.DefaultWorkingDirectory)MediaWish/MediaWish.WebApi/**/*.zip'
#- task: AzureWebApp@1
#  inputs:
#    azureSubscription: 'Azure subscription 1(9375756f-0e0f-4b34-aa53-18216b72c750)'
#    appType: 'webAppLinux'
#    appName: 'MediaWish'
#    package: '$(System.DefaultWorkingDirectory)/**/*.zip'


